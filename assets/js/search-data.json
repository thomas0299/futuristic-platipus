{
  
    
        "post0": {
            "title": "Accessing water point data from the Water Point Dataset Exchange",
            "content": "Business Problem . Uganda and sub-saharan Africa lack access to basic water services. Not having access to water puts lives at risk through improper sanitation, dehydration. It also reinforce the cycle of poverty and heavily impacts a population that heavily relies on subsistence farming. We want to enable the Ugandan government to repair water point quicker so citizens can have their basic needs and help communities develop and prosper. . Machine Learning Problem . Can we predict the functionality of water infrastructure to repair them quicker using Machine Learning? . Accessing Water Data . Water Point Data Exchange Website | API Guide and Dictionary | Documentation | . We will be accessing water point data from the source above. This notebook will do some initial cleaning and preparing for further analysis. . %run /Users/thomasadler/Desktop/futuristic-platipus/capstone/notebooks/ta_01_packages_functions.py . /Users/thomasadler/opt/anaconda3/lib/python3.9/site-packages/xgboost/compat.py:36: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead. from pandas import MultiIndex, Int64Index . %run /Users/thomasadler/Desktop/futuristic-platipus/keys.py . Image(images_filepath+&quot;wpdx-api.png&quot;) . socrata_domain = &#39;data.waterpointdata.org&#39; socrata_dataset_identifier = &#39;eqje-vguj&#39; socrata_token = os.environ.get(water_api_key) client = Socrata(socrata_domain, socrata_token, timeout=10) . WARNING:root:Requests made without an app_token will be subject to strict throttling limits. . The goal is to access every water point recorded in Uganda, all the information associated with that water point and put a very high limit, so we make sure we have accessed all possible points. . water_uganda_query = &quot;&quot;&quot; select * where clean_country_name = &#39;Uganda&#39; limit 200000 &quot;&quot;&quot; . results = client.get(socrata_dataset_identifier, query=water_uganda_query) water_df = pd.DataFrame.from_records(results) . uganda_water_df = water_df.copy() . uganda_water_df.tail() . row_id source lat_deg lon_deg report_date status_id water_tech_clean _water_tech_category facility_type clean_country_name ... subjective_quality scheme_id notes photo_lnk lat_deg_original lon_deg_original fecal_coliform_presence installer orig_lnk fecal_coliform_value . 108901 374602 | Ugandan Water Project | 0.6758382999999955 | 32.4640283 | 2022-09-04T00:00:00.000 | Yes | Hand Pump - India Mark II | Hand Pump | Improved | Uganda | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Ugandan Water Project (rehabilitation) | NaN | NaN | . 108902 374581 | Ugandan Water Project | 0.6553664659999812 | 32.472553197 | 2022-11-05T00:00:00.000 | Yes | NaN | NaN | Improved | Uganda | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Ugandan Water Project | NaN | NaN | . 108903 374572 | Ugandan Water Project | 0.692485682666941 | 32.66798296946349 | 2022-06-30T00:00:00.000 | Yes | NaN | NaN | Improved | Uganda | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Ugandan Water Project | NaN | NaN | . 108904 374644 | Ugandan Water Project | 0.18494999999998163 | 32.3369641 | 2022-09-06T00:00:00.000 | Yes | Hand Pump - India Mark II | Hand Pump | Improved | Uganda | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Ugandan Water Project (rehabilitation) | NaN | NaN | . 108905 374660 | Ugandan Water Project | 0.5684852999999981 | 32.80591690000001 | 2022-09-05T00:00:00.000 | Yes | Hand Pump - India Mark II | Hand Pump | Improved | Uganda | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Ugandan Water Project (rehabilitation) | NaN | NaN | . 5 rows × 67 columns . uganda_water_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 108906 entries, 0 to 108905 Data columns (total 67 columns): # Column Non-Null Count Dtype -- -- 0 row_id 108906 non-null object 1 source 108906 non-null object 2 lat_deg 108906 non-null object 3 lon_deg 108906 non-null object 4 report_date 108906 non-null object 5 status_id 108906 non-null object 6 water_tech_clean 26226 non-null object 7 _water_tech_category 26226 non-null object 8 facility_type 108906 non-null object 9 clean_country_name 108906 non-null object 10 clean_adm1 108906 non-null object 11 clean_adm2 108906 non-null object 12 clean_adm3 108906 non-null object 13 clean_adm4 108906 non-null object 14 country_id 108617 non-null object 15 data_lnk 108906 non-null object 16 distance_to_primary 108906 non-null object 17 distance_to_secondary 108906 non-null object 18 distance_to_tertiary 108906 non-null object 19 distance_to_city 108906 non-null object 20 distance_to_town 108906 non-null object 21 usage_cap 108869 non-null object 22 is_urban 108906 non-null object 23 days_since_report 108906 non-null object 24 staleness_score 108906 non-null object 25 is_latest 108906 non-null bool 26 location_id 108906 non-null object 27 cluster_size 108906 non-null object 28 clean_country_id 108906 non-null object 29 country_name 108617 non-null object 30 water_tech 14322 non-null object 31 status 94815 non-null object 32 adm2 101633 non-null object 33 adm3 11408 non-null object 34 adm1 101306 non-null object 35 new_georeferenced_column_ 108906 non-null object 36 lat_lon_deg 108906 non-null object 37 public_data_source 108906 non-null object 38 count 108906 non-null object 39 created_timestamp 108906 non-null object 40 updated 108906 non-null object 41 water_source_clean 91467 non-null object 42 water_source_category 91467 non-null object 43 wpdx_id 107814 non-null object 44 rehab_priority 18220 non-null object 45 served_population 89341 non-null object 46 local_population 89341 non-null object 47 crucialness 79618 non-null object 48 pressure 79618 non-null object 49 install_year 89181 non-null object 50 management_clean 92281 non-null object 51 status_clean 89408 non-null object 52 activity_id 90774 non-null object 53 water_source 104056 non-null object 54 management 92417 non-null object 55 converted 88237 non-null object 56 pay 37268 non-null object 57 subjective_quality 4406 non-null object 58 scheme_id 11302 non-null object 59 notes 11075 non-null object 60 photo_lnk 5090 non-null object 61 lat_deg_original 1556 non-null object 62 lon_deg_original 1556 non-null object 63 fecal_coliform_presence 1310 non-null object 64 installer 4638 non-null object 65 orig_lnk 1364 non-null object 66 fecal_coliform_value 213 non-null object dtypes: bool(1), object(66) memory usage: 54.9+ MB . We see that all imported columns are of object type, and that we&#39;ll have to fix that next. . We exclude columns which have already been cleaned by the WPD team and stored in another &quot;clean&quot; column. We also exclude columns with links and urls. . uganda_water_df_clean = pd.DataFrame(uganda_water_df.drop(columns=[&#39;clean_country_id&#39;, &#39;activity_id&#39;, &#39;adm1&#39;, &#39;adm2&#39;, &#39;adm3&#39;, &#39;country_id&#39;, &#39;country_name&#39;, &#39;status&#39;, &#39;water_source&#39;, &#39;management&#39;, &#39;water_tech&#39;, &#39;orig_lnk&#39;, &#39;photo_lnk&#39;, &#39;data_lnk&#39;, &#39;public_data_source&#39;, &#39;converted&#39;, &#39;created_timestamp&#39;, &#39;days_since_report&#39;, &#39;updated&#39;])) # check current columns uganda_water_df_clean.columns . Index([&#39;row_id&#39;, &#39;source&#39;, &#39;lat_deg&#39;, &#39;lon_deg&#39;, &#39;report_date&#39;, &#39;status_id&#39;, &#39;water_tech_clean&#39;, &#39;_water_tech_category&#39;, &#39;facility_type&#39;, &#39;clean_country_name&#39;, &#39;clean_adm1&#39;, &#39;clean_adm2&#39;, &#39;clean_adm3&#39;, &#39;clean_adm4&#39;, &#39;distance_to_primary&#39;, &#39;distance_to_secondary&#39;, &#39;distance_to_tertiary&#39;, &#39;distance_to_city&#39;, &#39;distance_to_town&#39;, &#39;usage_cap&#39;, &#39;is_urban&#39;, &#39;staleness_score&#39;, &#39;is_latest&#39;, &#39;location_id&#39;, &#39;cluster_size&#39;, &#39;new_georeferenced_column_&#39;, &#39;lat_lon_deg&#39;, &#39;count&#39;, &#39;water_source_clean&#39;, &#39;water_source_category&#39;, &#39;wpdx_id&#39;, &#39;rehab_priority&#39;, &#39;served_population&#39;, &#39;local_population&#39;, &#39;crucialness&#39;, &#39;pressure&#39;, &#39;install_year&#39;, &#39;management_clean&#39;, &#39;status_clean&#39;, &#39;pay&#39;, &#39;subjective_quality&#39;, &#39;scheme_id&#39;, &#39;notes&#39;, &#39;lat_deg_original&#39;, &#39;lon_deg_original&#39;, &#39;fecal_coliform_presence&#39;, &#39;installer&#39;, &#39;fecal_coliform_value&#39;], dtype=&#39;object&#39;) . print(&#39;fecal_coliform_presence distribution:&#39;, uganda_water_df_clean[&#39;fecal_coliform_presence&#39;].value_counts()) print(&#39;is_latest distribution:&#39;, uganda_water_df_clean[&#39;is_latest&#39;].value_counts()) print(&#39;is_urban distribution:&#39;, uganda_water_df_clean[&#39;is_urban&#39;].value_counts()) print(&#39;status_id distribution:&#39;, uganda_water_df_clean[&#39;status_id&#39;].value_counts()) . fecal_coliform_presence distribution: Present 1035 Absent 275 Name: fecal_coliform_presence, dtype: int64 is_latest distribution: True 96578 False 12328 Name: is_latest, dtype: int64 is_urban distribution: False 106175 True 2731 Name: is_urban, dtype: int64 status_id distribution: Yes 87600 No 18731 Unknown 2575 Name: status_id, dtype: int64 . We want to convert yes/no, True/False columns into 1s and 0s, for modelling&#39;s sake. We assume that water points that have an unknown status, are not working. . uganda_water_df_clean[&#39;fecal_coliform_presence&#39;] = uganda_water_df_clean[ &#39;fecal_coliform_presence&#39;].map({ &#39;Present&#39;: 1, &#39;Absent&#39;: 0 }) uganda_water_df_clean[&#39;is_latest&#39;] = uganda_water_df_clean[&#39;is_latest&#39;].astype( &#39;int64&#39;) uganda_water_df_clean[&#39;is_urban&#39;] = uganda_water_df_clean[&#39;is_urban&#39;].map({ True: 1, False: 0 }) uganda_water_df_clean[&#39;status_id&#39;] = uganda_water_df_clean[&#39;status_id&#39;].map({ &#39;Yes&#39;: 1, &#39;No&#39;: 0, &#39;Unknown&#39;: 0 }) # check uganda_water_df_clean.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 108906 entries, 0 to 108905 Data columns (total 48 columns): # Column Non-Null Count Dtype -- -- 0 row_id 108906 non-null object 1 source 108906 non-null object 2 lat_deg 108906 non-null object 3 lon_deg 108906 non-null object 4 report_date 108906 non-null object 5 status_id 108906 non-null int64 6 water_tech_clean 26226 non-null object 7 _water_tech_category 26226 non-null object 8 facility_type 108906 non-null object 9 clean_country_name 108906 non-null object 10 clean_adm1 108906 non-null object 11 clean_adm2 108906 non-null object 12 clean_adm3 108906 non-null object 13 clean_adm4 108906 non-null object 14 distance_to_primary 108906 non-null object 15 distance_to_secondary 108906 non-null object 16 distance_to_tertiary 108906 non-null object 17 distance_to_city 108906 non-null object 18 distance_to_town 108906 non-null object 19 usage_cap 108869 non-null object 20 is_urban 0 non-null float64 21 staleness_score 108906 non-null object 22 is_latest 108906 non-null int64 23 location_id 108906 non-null object 24 cluster_size 108906 non-null object 25 new_georeferenced_column_ 108906 non-null object 26 lat_lon_deg 108906 non-null object 27 count 108906 non-null object 28 water_source_clean 91467 non-null object 29 water_source_category 91467 non-null object 30 wpdx_id 107814 non-null object 31 rehab_priority 18220 non-null object 32 served_population 89341 non-null object 33 local_population 89341 non-null object 34 crucialness 79618 non-null object 35 pressure 79618 non-null object 36 install_year 89181 non-null object 37 management_clean 92281 non-null object 38 status_clean 89408 non-null object 39 pay 37268 non-null object 40 subjective_quality 4406 non-null object 41 scheme_id 11302 non-null object 42 notes 11075 non-null object 43 lat_deg_original 1556 non-null object 44 lon_deg_original 1556 non-null object 45 fecal_coliform_presence 1310 non-null float64 46 installer 4638 non-null object 47 fecal_coliform_value 213 non-null object dtypes: float64(2), int64(2), object(44) memory usage: 39.9+ MB . num_columns = [&#39;distance_to_city&#39;, &#39;distance_to_primary&#39;, &#39;lat_deg&#39;, &#39;lat_deg_original&#39;, &#39;lon_deg&#39;, &#39;lon_deg_original&#39;, &#39;distance_to_secondary&#39;, &#39;distance_to_tertiary&#39;, &#39;distance_to_town&#39;, &#39;fecal_coliform_value&#39;, &#39;cluster_size&#39;, &#39;count&#39;, &#39;crucialness&#39;, &#39;install_year&#39;, &#39;local_population&#39;, &#39;pressure&#39;, &#39;rehab_priority&#39;, &#39;served_population&#39;, &#39;staleness_score&#39;, &#39;usage_cap&#39;] for col in num_columns: float_converter(uganda_water_df_clean, col) # check uganda_water_df_clean.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 108906 entries, 0 to 108905 Data columns (total 48 columns): # Column Non-Null Count Dtype -- -- 0 row_id 108906 non-null object 1 source 108906 non-null object 2 lat_deg 108906 non-null float32 3 lon_deg 108906 non-null float32 4 report_date 108906 non-null object 5 status_id 108906 non-null int64 6 water_tech_clean 26226 non-null object 7 _water_tech_category 26226 non-null object 8 facility_type 108906 non-null object 9 clean_country_name 108906 non-null object 10 clean_adm1 108906 non-null object 11 clean_adm2 108906 non-null object 12 clean_adm3 108906 non-null object 13 clean_adm4 108906 non-null object 14 distance_to_primary 108906 non-null float32 15 distance_to_secondary 108906 non-null float32 16 distance_to_tertiary 108906 non-null float32 17 distance_to_city 108906 non-null float32 18 distance_to_town 108906 non-null float32 19 usage_cap 108869 non-null float32 20 is_urban 0 non-null float64 21 staleness_score 108906 non-null float32 22 is_latest 108906 non-null int64 23 location_id 108906 non-null object 24 cluster_size 108906 non-null float32 25 new_georeferenced_column_ 108906 non-null object 26 lat_lon_deg 108906 non-null object 27 count 108906 non-null float32 28 water_source_clean 91467 non-null object 29 water_source_category 91467 non-null object 30 wpdx_id 107814 non-null object 31 rehab_priority 18220 non-null float32 32 served_population 89341 non-null float32 33 local_population 89341 non-null float32 34 crucialness 79618 non-null float32 35 pressure 79618 non-null float32 36 install_year 89181 non-null float32 37 management_clean 92281 non-null object 38 status_clean 89408 non-null object 39 pay 37268 non-null object 40 subjective_quality 4406 non-null object 41 scheme_id 11302 non-null object 42 notes 11075 non-null object 43 lat_deg_original 1556 non-null float32 44 lon_deg_original 1556 non-null float32 45 fecal_coliform_presence 1310 non-null float64 46 installer 4638 non-null object 47 fecal_coliform_value 213 non-null float32 dtypes: float32(20), float64(2), int64(2), object(24) memory usage: 31.6+ MB . date_converter(uganda_water_df_clean, &#39;report_date&#39;) uganda_water_df_clean[&#39;install_year&#39;]=pd.to_datetime(uganda_water_df_clean[&#39;install_year&#39;], format=&quot;%Y&quot;) # check print(uganda_water_df_clean[&#39;report_date&#39;].head()) print(uganda_water_df_clean[&#39;install_year&#39;].head()) . 0 2005-09-07 1 2005-09-07 2 2005-09-07 3 2005-09-07 4 2005-09-07 Name: report_date, dtype: datetime64[ns] 0 NaT 1 NaT 2 NaT 3 NaT 4 NaT Name: install_year, dtype: datetime64[ns] . str_columns = list(uganda_water_df_clean.select_dtypes(&quot;object&quot;).columns) # remove special characters from string columns for col in str_columns: uganda_water_df_clean[col].str.replace(&#39;[^ w s]&#39;, &#39;&#39;) . uganda_water_df_clean.isna().mean() * 100 . row_id 0.000000 source 0.000000 lat_deg 0.000000 lon_deg 0.000000 report_date 0.000000 status_id 0.000000 water_tech_clean 75.918682 _water_tech_category 75.918682 facility_type 0.000000 clean_country_name 0.000000 clean_adm1 0.000000 clean_adm2 0.000000 clean_adm3 0.000000 clean_adm4 0.000000 distance_to_primary 0.000000 distance_to_secondary 0.000000 distance_to_tertiary 0.000000 distance_to_city 0.000000 distance_to_town 0.000000 usage_cap 0.033974 is_urban 100.000000 staleness_score 0.000000 is_latest 0.000000 location_id 0.000000 cluster_size 0.000000 new_georeferenced_column_ 0.000000 lat_lon_deg 0.000000 count 0.000000 water_source_clean 16.012892 water_source_category 16.012892 wpdx_id 1.002700 rehab_priority 83.269976 served_population 17.965034 local_population 17.965034 crucialness 26.892917 pressure 26.892917 install_year 18.111950 management_clean 15.265458 status_clean 17.903513 pay 65.779663 subjective_quality 95.954309 scheme_id 89.622243 notes 89.830680 lat_deg_original 98.571245 lon_deg_original 98.571245 fecal_coliform_presence 98.797128 installer 95.741281 fecal_coliform_value 99.804418 dtype: float64 . We decide to drop columns which have more than 50% of its values that are missing. We deem these columns not be of good enough quality to be analysed. Some of these columns pertain to the presence of fecal coliform, the technology of the water point, the price of the water and other notes on the quality of the water available. . uganda_water_df_clean = uganda_water_df_clean.dropna( axis=1, thresh=0.5 * len(uganda_water_df_clean)) # check uganda_water_df_clean.isna().mean() * 100 . row_id 0.000000 source 0.000000 lat_deg 0.000000 lon_deg 0.000000 report_date 0.000000 status_id 0.000000 facility_type 0.000000 clean_country_name 0.000000 clean_adm1 0.000000 clean_adm2 0.000000 clean_adm3 0.000000 clean_adm4 0.000000 distance_to_primary 0.000000 distance_to_secondary 0.000000 distance_to_tertiary 0.000000 distance_to_city 0.000000 distance_to_town 0.000000 usage_cap 0.033974 staleness_score 0.000000 is_latest 0.000000 location_id 0.000000 cluster_size 0.000000 new_georeferenced_column_ 0.000000 lat_lon_deg 0.000000 count 0.000000 water_source_clean 16.012892 water_source_category 16.012892 wpdx_id 1.002700 served_population 17.965034 local_population 17.965034 crucialness 26.892917 pressure 26.892917 install_year 18.111950 management_clean 15.265458 status_clean 17.903513 dtype: float64 . The documentation informs us that this dataset is not supposed to have any duplicate columns or rows. . # uganda_water_df_clean.duplicated().sum() . # uganda_water_df_clean.T.duplicated().sum() . We impute the missing values in the remaining columns with the median for their administrative region. We first choose the lowest level, clean_adm4, then if there are remaining missing values we choose the second lowest clean_adm3 and so on. We choose the median so that it is not too sensitive to outliers. . uganda_water_df_clean_numerical = uganda_water_df_clean[ uganda_water_df_clean.select_dtypes(exclude=&#39;object&#39;).columns] # check uganda_water_df_clean_numerical.head() . lat_deg lon_deg report_date status_id distance_to_primary distance_to_secondary distance_to_tertiary distance_to_city distance_to_town usage_cap staleness_score is_latest cluster_size count served_population local_population crucialness pressure install_year . 0 0.158537 | 30.490643 | 2005-09-07 | 1 | 37666.023438 | 4875.484375 | 23.399448 | 45104.835938 | 32223.873047 | 250.0 | 14.327719 | 0 | 76.0 | 1.0 | NaN | NaN | NaN | NaN | NaT | . 1 0.070597 | 30.415651 | 2005-09-07 | 1 | 35843.273438 | 2602.279297 | 971.238464 | 38419.558594 | 24194.054688 | 250.0 | 14.327719 | 0 | 8.0 | 1.0 | NaN | NaN | NaN | NaN | NaT | . 2 0.158667 | 30.490551 | 2005-09-07 | 1 | 37651.726562 | 4860.169922 | 34.916096 | 45094.210938 | 32236.693359 | 250.0 | 14.327719 | 0 | 76.0 | 1.0 | NaN | NaN | NaN | NaN | NaT | . 3 0.430480 | 30.751951 | 2005-09-07 | 0 | 14592.108398 | 16548.333984 | 1269.275391 | 58369.609375 | 23365.746094 | 250.0 | 14.327719 | 1 | 1.0 | 1.0 | 1.0 | 25.0 | 0.04 | 0.004 | NaT | . 4 -0.134680 | 30.351593 | 2005-09-07 | 1 | 29073.130859 | 6369.317871 | 3270.906982 | 45044.160156 | 16042.707031 | 250.0 | 14.327719 | 0 | 2.0 | 1.0 | NaN | NaN | NaN | NaN | NaT | . null_cols = uganda_water_df_clean_numerical.isna().sum() cols_to_impute = null_cols[null_cols &gt; 0].index cols_to_impute = cols_to_impute.drop(&#39;install_year&#39;) # check cols_to_impute . Index([&#39;usage_cap&#39;, &#39;served_population&#39;, &#39;local_population&#39;, &#39;crucialness&#39;, &#39;pressure&#39;], dtype=&#39;object&#39;) . for col in cols_to_impute: plt.figure() sns.distplot(uganda_water_df_clean[col]) plt.axvline(uganda_water_df_clean[col].mean(), c=&#39;r&#39;, label=&#39;mean&#39;) plt.axvline(uganda_water_df_clean[col].median(), c=&#39;gold&#39;, label=&#39;median&#39;) plt.legend() plt.title(f&#39;Density plot of {col}&#39;) plt.show() . We can confirm that the median is the better choice as it represents our data better. . for col in cols_to_impute: missing_to_regional_median(uganda_water_df_clean, col, &#39;clean_adm4&#39;) # check uganda_water_df_clean.isna().sum() . row_id 0 source 0 lat_deg 0 lon_deg 0 report_date 0 status_id 0 facility_type 0 clean_country_name 0 clean_adm1 0 clean_adm2 0 clean_adm3 0 clean_adm4 0 distance_to_primary 0 distance_to_secondary 0 distance_to_tertiary 0 distance_to_city 0 distance_to_town 0 usage_cap 0 staleness_score 0 is_latest 0 location_id 0 cluster_size 0 new_georeferenced_column_ 0 lat_lon_deg 0 count 0 water_source_clean 17439 water_source_category 17439 wpdx_id 1092 served_population 8 local_population 8 crucialness 113 pressure 113 install_year 19725 management_clean 16625 status_clean 19498 dtype: int64 . for col in cols_to_impute: missing_to_regional_median(uganda_water_df_clean, col, &#39;clean_adm3&#39;) # check uganda_water_df_clean.isna().sum() . row_id 0 source 0 lat_deg 0 lon_deg 0 report_date 0 status_id 0 facility_type 0 clean_country_name 0 clean_adm1 0 clean_adm2 0 clean_adm3 0 clean_adm4 0 distance_to_primary 0 distance_to_secondary 0 distance_to_tertiary 0 distance_to_city 0 distance_to_town 0 usage_cap 0 staleness_score 0 is_latest 0 location_id 0 cluster_size 0 new_georeferenced_column_ 0 lat_lon_deg 0 count 0 water_source_clean 17439 water_source_category 17439 wpdx_id 1092 served_population 0 local_population 0 crucialness 0 pressure 0 install_year 19725 management_clean 16625 status_clean 19498 dtype: int64 . for col in cols_to_impute: missing_to_regional_median(uganda_water_df_clean, col, &#39;clean_adm2&#39;) # check uganda_water_df_clean.isna().sum() . row_id 0 source 0 lat_deg 0 lon_deg 0 report_date 0 status_id 0 facility_type 0 clean_country_name 0 clean_adm1 0 clean_adm2 0 clean_adm3 0 clean_adm4 0 distance_to_primary 0 distance_to_secondary 0 distance_to_tertiary 0 distance_to_city 0 distance_to_town 0 usage_cap 0 staleness_score 0 is_latest 0 location_id 0 cluster_size 0 new_georeferenced_column_ 0 lat_lon_deg 0 count 0 water_source_clean 17439 water_source_category 17439 wpdx_id 1092 served_population 0 local_population 0 crucialness 0 pressure 0 install_year 19725 management_clean 16625 status_clean 19498 dtype: int64 . for col in cols_to_impute: missing_to_regional_median(uganda_water_df_clean, col, &#39;clean_adm1&#39;) # check uganda_water_df_clean.isna().sum() . row_id 0 source 0 lat_deg 0 lon_deg 0 report_date 0 status_id 0 facility_type 0 clean_country_name 0 clean_adm1 0 clean_adm2 0 clean_adm3 0 clean_adm4 0 distance_to_primary 0 distance_to_secondary 0 distance_to_tertiary 0 distance_to_city 0 distance_to_town 0 usage_cap 0 staleness_score 0 is_latest 0 location_id 0 cluster_size 0 new_georeferenced_column_ 0 lat_lon_deg 0 count 0 water_source_clean 17439 water_source_category 17439 wpdx_id 1092 served_population 0 local_population 0 crucialness 0 pressure 0 install_year 19725 management_clean 16625 status_clean 19498 dtype: int64 . for col in cols_to_impute: uganda_water_df_clean[col] = uganda_water_df_clean[col].fillna( uganda_water_df_clean[col].median()) # check remaining null values uganda_water_df_clean.isna().sum() . row_id 0 source 0 lat_deg 0 lon_deg 0 report_date 0 status_id 0 facility_type 0 clean_country_name 0 clean_adm1 0 clean_adm2 0 clean_adm3 0 clean_adm4 0 distance_to_primary 0 distance_to_secondary 0 distance_to_tertiary 0 distance_to_city 0 distance_to_town 0 usage_cap 0 staleness_score 0 is_latest 0 location_id 0 cluster_size 0 new_georeferenced_column_ 0 lat_lon_deg 0 count 0 water_source_clean 17439 water_source_category 17439 wpdx_id 1092 served_population 0 local_population 0 crucialness 0 pressure 0 install_year 19725 management_clean 16625 status_clean 19498 dtype: int64 . We will not fill the non-numeric columns that still have missing values as the proportion of missing values is too great (15-25%). We will decide what to do with them later in our analysis. We must do this with great care as omitting or filling these columns/rows will have a large impact on the dataset. . uganda_water_df_clean.to_csv(data_filepath + &#39;ta_1_uganda_water_df_clean.csv&#39;) . Image(dictionary_filepath+&quot;1A-Water-Dictionary.png&quot;) . # #constructing columns of interest # median_columns_adm1=list(cols_to_impute ) # median_columns_adm1.append(&#39;clean_adm1&#39;) # #group by adm2, with median # median_adm1=uganda_water_df_clean[median_columns_adm1].groupby(&#39;clean_adm1&#39;).median() # median_adm1.reset_index(inplace=True) # #merge median dataset with original dataset # uganda_water_df_clean=pd.merge(uganda_water_df_clean, median_adm1, how=&#39;left&#39;, # left_on=uganda_water_df_clean[&#39;clean_adm1&#39;], # right_on=median_adm1[&#39;clean_adm1&#39;], suffixes=(None, &#39;_median_adm1&#39;)) # #fill null values with the median value of its region (adm2) # for col in cols_to_impute: # uganda_water_df_clean[col] = uganda_water_df_clean[col].fillna(uganda_water_df_clean # [f&#39;{col}_median_adm1&#39;]) # #removing key column resulting from the merge # del uganda_water_df_clean[uganda_water_df_clean.columns[0]] # uganda_water_df_clean.head() # #check remaining null values # uganda_water_df_clean.isna().sum() .",
            "url": "https://thomas0299.github.io/futuristic-platipus//futuristic-platipus/2022/08/15/ta_02_access-water_data.html",
            "relUrl": "/2022/08/15/ta_02_access-water_data.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://thomas0299.github.io/futuristic-platipus//futuristic-platipus/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Thomas, I am an economist transitioning into Data Science. . Passionate about statistics, machine learning, causal inference and econometrics. | Interested in complexity science, network theory and agent based models. | Fascinated about edible insects, novel food trends and the ways to improve our food supply chain. | Excited by the circular economy and finding solutions to e-waste through entrepreneurship . | Loves weightlifting. | . Don’t hesitate to get in touch: Linkedin . Medium . University email . Personal email .",
          "url": "https://thomas0299.github.io/futuristic-platipus//futuristic-platipus/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://thomas0299.github.io/futuristic-platipus//futuristic-platipus/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}